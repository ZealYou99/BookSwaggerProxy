/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.51).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package gg.zeal.GeneratedLibrary.api;

import gg.zeal.GeneratedLibrary.model.Book;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;


import java.util.List;

@Validated
@Api(value = "BookController", description = "the BookController API")
public interface BookControllerApi {

    @ApiOperation(value = "", nickname = "all", notes = "", response = Book.class, responseContainer = "List", tags={ "book-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Book.class, responseContainer = "List") })
    @RequestMapping(value = "/books",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<Book>> all();


    @ApiOperation(value = "", nickname = "delete", notes = "", tags={ "book-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/books/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> delete(@ApiParam(value = "", required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "get", notes = "", response = Book.class, tags={ "book-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Book.class) })
    @RequestMapping(value = "/books/{id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Book> get(@ApiParam(value = "", required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "post", notes = "", response = Book.class, tags={ "book-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Book.class) })
    @RequestMapping(value = "/books",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Book> post(@ApiParam(value = "", required=true )  @RequestBody Book body
);


    @ApiOperation(value = "", nickname = "put", notes = "", response = Book.class, tags={ "book-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Book.class) })
    @RequestMapping(value = "/books/{id}",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<Book> put(@ApiParam(value = "", required=true) @PathVariable("id") Long id
, @ApiParam(value = "", required=true )  @RequestBody Book body
);

}

